{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0252]: the name `_alias` is defined multiple times\n  --> src/haskell/basic.rs:59:5\n   |\n6  | use std::clone::Clone as _alias;\n   |     --------------------------- previous import of the trait `_alias` here\n...\n59 | use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ `_alias` reimported here\n   |\n   = note: `_alias` must be defined only once in the type namespace of this module\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`_alias` must be defined only once in the type namespace of this module","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove unnecessary import","rendered":null,"spans":[{"byte_end":1662,"byte_start":1630,"column_end":33,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":33,"highlight_start":1,"text":"use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {"}]}]}],"code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","message":"the name `_alias` is defined multiple times","spans":[{"byte_end":1661,"byte_start":1634,"column_end":32,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"`_alias` reimported here","line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {"}]},{"byte_end":110,"byte_start":83,"column_end":32,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":false,"label":"previous import of the trait `_alias` here","line_end":6,"line_start":6,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"use std::clone::Clone as _alias;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0252]: the name `mem` is defined multiple times\n  --> src/haskell/basic.rs:66:5\n   |\n9  | use std::mem;\n   |     -------- previous import of the module `mem` here\n...\n66 | use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {\n   |     ^^^^^^^^ `mem` reimported here\n   |\n   = note: `mem` must be defined only once in the type namespace of this module\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`mem` must be defined only once in the type namespace of this module","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove unnecessary import","rendered":null,"spans":[{"byte_end":1878,"byte_start":1865,"column_end":14,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":"","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":14,"highlight_start":1,"text":"use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {"}]}]}],"code":{"code":"E0252","explanation":"Two items of the same name cannot be imported without rebinding one of the\nitems under a new local name.\n\nErroneous code example:\n\n```compile_fail,E0252\nuse foo::baz;\nuse bar::baz; // error, do `use bar::baz as quux` instead\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nYou can use aliases in order to fix this error. Example:\n\n```\nuse foo::baz as foo_baz;\nuse bar::baz; // ok!\n\nfn main() {}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n\nOr you can reference the item with its parent:\n\n```\nuse bar::baz;\n\nfn main() {\n    let x = foo::baz; // ok!\n}\n\nmod foo {\n    pub struct baz;\n}\n\nmod bar {\n    pub mod baz {}\n}\n```\n"},"level":"error","message":"the name `mem` is defined multiple times","spans":[{"byte_end":1877,"byte_start":1869,"column_end":13,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"`mem` reimported here","line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {"}]},{"byte_end":178,"byte_start":170,"column_end":13,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":false,"label":"previous import of the module `mem` here","line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"use std::mem;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `crate::list`\n --> src/haskell/basic.rs:3:12\n  |\n3 | use crate::list::List;\n  |            ^^^^ could not find `list` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `crate::list`","spans":[{"byte_end":39,"byte_start":35,"column_end":16,"column_start":12,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"could not find `list` in the crate root","line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::list::List;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `super::List`\n --> src/haskell/basic.rs:5:5\n  |\n5 | use super::List;\n  |     ^^^^^^^^^^^ no `List` in `haskell`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `super::List`","spans":[{"byte_end":77,"byte_start":66,"column_end":16,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"no `List` in `haskell`","line_end":5,"line_start":5,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":5,"text":"use super::List;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `crate::list`\n  --> src/haskell/basic.rs:12:12\n   |\n12 | use crate::list::List;\n   |            ^^^^ could not find `list` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `crate::list`","spans":[{"byte_end":233,"byte_start":229,"column_end":16,"column_start":12,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"could not find `list` in the crate root","line_end":12,"line_start":12,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":16,"highlight_start":12,"text":"use crate::list::List;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `self::module`\n --> src/haskell/transform.rs:3:11\n  |\n3 | use self::module::SuccessResponse;\n  |           ^^^^^^ could not find `module` in `self`\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `self::module`","spans":[{"byte_end":68,"byte_start":62,"column_end":17,"column_start":11,"expansion":null,"file_name":"src/haskell/transform.rs","is_primary":true,"label":"could not find `module` in `self`","line_end":3,"line_start":3,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":11,"text":"use self::module::SuccessResponse;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0432]: unresolved import `crate::module`\n  --> src/haskell/transform.rs:14:12\n   |\n14 | use crate::module::SuccessResponse;\n   |            ^^^^^^ could not find `module` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","message":"unresolved import `crate::module`","spans":[{"byte_end":450,"byte_start":444,"column_end":18,"column_start":12,"expansion":null,"file_name":"src/haskell/transform.rs","is_primary":true,"label":"could not find `module` in the crate root","line_end":14,"line_start":14,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"use crate::module::SuccessResponse;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `list` in the crate root\n  --> src/haskell/basic.rs:13:43\n   |\n13 | pub fn list_length<T>(input_list: &crate::list::List<T>) -> i32 {\n   |                                           ^^^^ could not find `list` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `list` in the crate root","spans":[{"byte_end":287,"byte_start":283,"column_end":47,"column_start":43,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"could not find `list` in the crate root","line_end":13,"line_start":13,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":47,"highlight_start":43,"text":"pub fn list_length<T>(input_list: &crate::list::List<T>) -> i32 {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `list` in the crate root\n  --> src/haskell/basic.rs:15:16\n   |\n15 |         crate::list::List::Nil => 0,\n   |                ^^^^ could not find `list` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `list` in the crate root","spans":[{"byte_end":349,"byte_start":345,"column_end":20,"column_start":16,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"could not find `list` in the crate root","line_end":15,"line_start":15,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"        crate::list::List::Nil => 0,"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0433]: failed to resolve: could not find `list` in the crate root\n  --> src/haskell/basic.rs:16:16\n   |\n16 |         crate::list::List::Cons(_, tail) => 1 + list_length(tail),\n   |                ^^^^ could not find `list` in the crate root\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","message":"failed to resolve: could not find `list` in the crate root","spans":[{"byte_end":386,"byte_start":382,"column_end":20,"column_start":16,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"could not find `list` in the crate root","line_end":16,"line_start":16,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":16,"text":"        crate::list::List::Cons(_, tail) => 1 + list_length(tail),"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:19:31\n   |\n19 |     Success { message: Option<Text>, payload: A },\n   |                               ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n18 | pub enum Response<A, Text> {\n   |                    ++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"you might be missing a type parameter","rendered":null,"spans":[{"byte_end":194,"byte_start":194,"column_end":20,"column_start":20,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":", Text","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":20,"text":"pub enum Response<A> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Text` in this scope","spans":[{"byte_end":232,"byte_start":228,"column_end":35,"column_start":31,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":"not found in this scope","line_end":19,"line_start":19,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":35,"highlight_start":31,"text":"    Success { message: Option<Text>, payload: A },"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:20:45\n   |\n20 |     Failure { code: String, message: Option<Text> },\n   |                                             ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n18 | pub enum Response<A, Text> {\n   |                    ++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"you might be missing a type parameter","rendered":null,"spans":[{"byte_end":194,"byte_start":194,"column_end":20,"column_start":20,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":null,"line_end":18,"line_start":18,"suggested_replacement":", Text","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":20,"highlight_start":20,"text":"pub enum Response<A> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Text` in this scope","spans":[{"byte_end":297,"byte_start":293,"column_end":49,"column_start":45,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":"not found in this scope","line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":45,"text":"    Failure { code: String, message: Option<Text> },"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:23:40\n   |\n23 |     pub fn new_success(message: Option<Text>, payload: A) -> Self {\n   |                                        ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n22 | impl<A, Text> Response<A> {\n   |       ++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"you might be missing a type parameter","rendered":null,"spans":[{"byte_end":310,"byte_start":310,"column_end":7,"column_start":7,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":", Text","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":7,"highlight_start":7,"text":"impl<A> Response<A> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Text` in this scope","spans":[{"byte_end":369,"byte_start":365,"column_end":44,"column_start":40,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":"not found in this scope","line_end":23,"line_start":23,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":44,"highlight_start":40,"text":"    pub fn new_success(message: Option<Text>, payload: A) -> Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:26:54\n   |\n26 |     pub fn new_failure(code: String, message: Option<Text>) -> Self {\n   |                                                      ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n22 | impl<A, Text> Response<A> {\n   |       ++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"you might be missing a type parameter","rendered":null,"spans":[{"byte_end":310,"byte_start":310,"column_end":7,"column_start":7,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":null,"line_end":22,"line_start":22,"suggested_replacement":", Text","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":7,"highlight_start":7,"text":"impl<A> Response<A> {"}]}]}],"code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","message":"cannot find type `Text` in this scope","spans":[{"byte_end":504,"byte_start":500,"column_end":58,"column_start":54,"expansion":null,"file_name":"src/haskell/types.rs","is_primary":true,"label":"not found in this scope","line_end":26,"line_start":26,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":58,"highlight_start":54,"text":"    pub fn new_failure(code: String, message: Option<Text>) -> Self {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::char`\n --> src/haskell/basic.rs:4:5\n  |\n4 | use std::char;\n  |     ^^^^^^^^^\n  |\n  = note: `#[warn(unused_imports)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(unused_imports)]` on by default","rendered":null,"spans":[]},{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":62,"byte_start":47,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":5,"line_start":4,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":15,"highlight_start":1,"text":"use std::char;"},{"highlight_end":1,"highlight_start":1,"text":"use super::List;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::char`","spans":[{"byte_end":60,"byte_start":51,"column_end":14,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":4,"line_start":4,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":14,"highlight_start":5,"text":"use std::char;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::mem`\n --> src/haskell/basic.rs:9:5\n  |\n9 | use std::mem;\n  |     ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":180,"byte_start":166,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":10,"line_start":9,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":1,"text":"use std::mem;"},{"highlight_end":1,"highlight_start":1,"text":"use std::clone::Clone as CloneTrait;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::mem`","spans":[{"byte_end":178,"byte_start":170,"column_end":13,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":9,"line_start":9,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"use std::mem;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::clone::Clone as _alias`\n  --> src/haskell/basic.rs:59:5\n   |\n59 | use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":1662,"byte_start":1630,"column_end":33,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":33,"highlight_start":1,"text":"use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::clone::Clone as _alias`","spans":[{"byte_end":1661,"byte_start":1634,"column_end":32,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":59,"line_start":59,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":32,"highlight_start":5,"text":"use std::clone::Clone as _alias;pub fn list_tail<T: _alias>(input_list: Vec<T>) -> Result<Vec<T>, String> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::mem`\n  --> src/haskell/basic.rs:66:5\n   |\n66 | use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {\n   |     ^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":1878,"byte_start":1865,"column_end":14,"column_start":1,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":14,"highlight_start":1,"text":"use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::mem`","spans":[{"byte_end":1877,"byte_start":1869,"column_end":13,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":66,"line_start":66,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":13,"highlight_start":5,"text":"use std::mem;pub fn list_last<'a, T: Clone>(input: &'a [T]) -> Result<T, &'static str> {"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::ops::Add`\n --> src/haskell/compute.rs:1:5\n  |\n1 | use std::ops::Add;\n  |     ^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":19,"byte_start":0,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/haskell/compute.rs","is_primary":true,"label":null,"line_end":2,"line_start":1,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":19,"highlight_start":1,"text":"use std::ops::Add;"},{"highlight_end":1,"highlight_start":1,"text":"use std::fmt::Debug;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::ops::Add`","spans":[{"byte_end":17,"byte_start":4,"column_end":18,"column_start":5,"expansion":null,"file_name":"src/haskell/compute.rs","is_primary":true,"label":null,"line_end":1,"line_start":1,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":5,"text":"use std::ops::Add;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::fmt::Debug`\n --> src/haskell/compute.rs:2:5\n  |\n2 | use std::fmt::Debug;\n  |     ^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":40,"byte_start":19,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/haskell/compute.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":21,"highlight_start":1,"text":"use std::fmt::Debug;"},{"highlight_end":1,"highlight_start":1,"text":""}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::fmt::Debug`","spans":[{"byte_end":38,"byte_start":23,"column_end":20,"column_start":5,"expansion":null,"file_name":"src/haskell/compute.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":5,"text":"use std::fmt::Debug;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `crate::haskell::types::Response as HTResponse`\n --> src/haskell/transform.rs:2:5\n  |\n2 | use crate::haskell::types::Response as HTResponse;\n  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"help","message":"remove the whole `use` item","rendered":null,"spans":[{"byte_end":52,"byte_start":1,"column_end":1,"column_start":1,"expansion":null,"file_name":"src/haskell/transform.rs","is_primary":true,"label":null,"line_end":3,"line_start":2,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":51,"highlight_start":1,"text":"use crate::haskell::types::Response as HTResponse;"},{"highlight_end":1,"highlight_start":1,"text":"use self::module::SuccessResponse;"}]}]}],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `crate::haskell::types::Response as HTResponse`","spans":[{"byte_end":50,"byte_start":5,"column_end":50,"column_start":5,"expansion":null,"file_name":"src/haskell/transform.rs","is_primary":true,"label":null,"line_end":2,"line_start":2,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":50,"highlight_start":5,"text":"use crate::haskell::types::Response as HTResponse;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead\n --> src/haskell/basic.rs:7:17\n  |\n7 | use std::ascii::AsciiExt;\n  |                 ^^^^^^^^\n  |\n  = note: `#[warn(deprecated)]` on by default\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"`#[warn(deprecated)]` on by default","rendered":null,"spans":[]}],"code":{"code":"deprecated","explanation":null},"level":"warning","message":"use of deprecated trait `std::ascii::AsciiExt`: use inherent methods instead","spans":[{"byte_end":136,"byte_start":128,"column_end":25,"column_start":17,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":17,"text":"use std::ascii::AsciiExt;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> src/haskell/basic.rs:41:56\n    |\n41  |                 let mut mapped_tail = list_map(f, tail.to_vec()); \n    |                                                        ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\nnote: required by a bound in `slice::<impl [T]>::to_vec`\n   --> /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs:414:12\n    |\n412 |     pub fn to_vec(&self) -> Vec<T>\n    |            ------ required by a bound in this associated function\n413 |     where\n414 |         T: Clone,\n    |            ^^^^^ required by this bound in `slice::<impl [T]>::to_vec`\nhelp: consider further restricting type parameter `T`\n    |\n35  |         F: Fn(&T) -> R, T: std::clone::Clone\n    |                       ~~~~~~~~~~~~~~~~~~~~~~\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"required by a bound in `slice::<impl [T]>::to_vec`","rendered":null,"spans":[{"byte_end":15861,"byte_start":15855,"column_end":18,"column_start":12,"expansion":null,"file_name":"/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs","is_primary":false,"label":"required by a bound in this associated function","line_end":412,"line_start":412,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":18,"highlight_start":12,"text":"    pub fn to_vec(&self) -> Vec<T>"}]},{"byte_end":15905,"byte_start":15900,"column_end":17,"column_start":12,"expansion":null,"file_name":"/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs","is_primary":true,"label":"required by this bound in `slice::<impl [T]>::to_vec`","line_end":414,"line_start":414,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":17,"highlight_start":12,"text":"        T: Clone,"}]}]},{"children":[],"code":null,"level":"help","message":"consider further restricting type parameter `T`","rendered":null,"spans":[{"byte_end":978,"byte_start":977,"column_end":24,"column_start":23,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":35,"line_start":35,"suggested_replacement":", T: std::clone::Clone","suggestion_applicability":"MachineApplicable","text":[{"highlight_end":24,"highlight_start":23,"text":"        F: Fn(&T) -> R,"}]}]}],"code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","message":"the trait bound `T: Clone` is not satisfied","spans":[{"byte_end":1188,"byte_start":1182,"column_end":62,"column_start":56,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"the trait `Clone` is not implemented for `T`","line_end":41,"line_start":41,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":62,"highlight_start":56,"text":"                let mut mapped_tail = list_map(f, tail.to_vec()); "}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0308]: mismatched types\n   --> src/haskell/basic.rs:109:41\n    |\n109 |     crate::haskell::basic::list_reverse(input).into_iter().collect()\n    |     ----------------------------------- ^^^^^ expected `Vec<_>`, found `String`\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected struct `Vec<_>`\n               found struct `String`\nnote: function defined here\n   --> src/haskell/basic.rs:20:8\n    |\n20  | pub fn list_reverse<T: Clone>(input_list: Vec<T>) -> Vec<T> {\n    |        ^^^^^^^^^^^^           ------------------\nhelp: call `Into::into` on this expression to convert `String` into `Vec<_>`\n    |\n109 |     crate::haskell::basic::list_reverse(input.into()).into_iter().collect()\n    |                                              +++++++\n\n","$message_type":"diagnostic","children":[{"children":[],"code":null,"level":"note","message":"expected struct `Vec<_>`\n   found struct `String`","rendered":null,"spans":[]},{"children":[],"code":null,"level":"note","message":"function defined here","rendered":null,"spans":[{"byte_end":491,"byte_start":473,"column_end":49,"column_start":31,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":false,"label":"","line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":49,"highlight_start":31,"text":"pub fn list_reverse<T: Clone>(input_list: Vec<T>) -> Vec<T> {"}]},{"byte_end":462,"byte_start":450,"column_end":20,"column_start":8,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":20,"line_start":20,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":20,"highlight_start":8,"text":"pub fn list_reverse<T: Clone>(input_list: Vec<T>) -> Vec<T> {"}]}]},{"children":[],"code":null,"level":"help","message":"call `Into::into` on this expression to convert `String` into `Vec<_>`","rendered":null,"spans":[{"byte_end":3040,"byte_start":3040,"column_end":46,"column_start":46,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":109,"line_start":109,"suggested_replacement":".into()","suggestion_applicability":"MaybeIncorrect","text":[{"highlight_end":46,"highlight_start":46,"text":"    crate::haskell::basic::list_reverse(input).into_iter().collect()"}]}]}],"code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","message":"mismatched types","spans":[{"byte_end":3040,"byte_start":3035,"column_end":46,"column_start":41,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":"expected `Vec<_>`, found `String`","line_end":109,"line_start":109,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":46,"highlight_start":41,"text":"    crate::haskell::basic::list_reverse(input).into_iter().collect()"}]},{"byte_end":3034,"byte_start":2999,"column_end":40,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":false,"label":"arguments to this function are incorrect","line_end":109,"line_start":109,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":40,"highlight_start":5,"text":"    crate::haskell::basic::list_reverse(input).into_iter().collect()"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error[E0533]: expected value, found struct variant `crate::haskell::types::Response::Failure`\n  --> src/haskell/transform.rs:11:5\n   |\n11 |     crate::haskell::types::Response::Failure(code.to_string(), Some(message))\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a value\n\n","$message_type":"diagnostic","children":[],"code":{"code":"E0533","explanation":"An item which isn't a unit struct, a variant, nor a constant has been used as a\nmatch pattern.\n\nErroneous code example:\n\n```compile_fail,E0533\nstruct Tortoise;\n\nimpl Tortoise {\n    fn turtle(&self) -> u32 { 0 }\n}\n\nmatch 0u32 {\n    Tortoise::turtle => {} // Error!\n    _ => {}\n}\nif let Tortoise::turtle = 0u32 {} // Same error!\n```\n\nIf you want to match against a value returned by a method, you need to bind the\nvalue first:\n\n```\nstruct Tortoise;\n\nimpl Tortoise {\n    fn turtle(&self) -> u32 { 0 }\n}\n\nmatch 0u32 {\n    x if x == Tortoise.turtle() => {} // Bound into `x` then we compare it!\n    _ => {}\n}\n```\n"},"level":"error","message":"expected value, found struct variant `crate::haskell::types::Response::Failure`","spans":[{"byte_end":396,"byte_start":356,"column_end":45,"column_start":5,"expansion":null,"file_name":"src/haskell/transform.rs","is_primary":true,"label":"not a value","line_end":11,"line_start":11,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":45,"highlight_start":5,"text":"    crate::haskell::types::Response::Failure(code.to_string(), Some(message))"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::ascii::AsciiExt`\n --> src/haskell/basic.rs:7:5\n  |\n7 | use std::ascii::AsciiExt;\n  |     ^^^^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::ascii::AsciiExt`","spans":[{"byte_end":136,"byte_start":116,"column_end":25,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":7,"line_start":7,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":25,"highlight_start":5,"text":"use std::ascii::AsciiExt;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::clone::Clone`\n --> src/haskell/basic.rs:8:5\n  |\n8 | use std::clone::Clone as _;\n  |     ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::clone::Clone`","spans":[{"byte_end":159,"byte_start":142,"column_end":22,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":8,"line_start":8,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use std::clone::Clone as _;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"warning: unused import: `std::clone::Clone`\n  --> src/haskell/basic.rs:10:5\n   |\n10 | use std::clone::Clone as CloneTrait;\n   |     ^^^^^^^^^^^^^^^^^\n\n","$message_type":"diagnostic","children":[],"code":{"code":"unused_imports","explanation":null},"level":"warning","message":"unused import: `std::clone::Clone`","spans":[{"byte_end":201,"byte_start":184,"column_end":22,"column_start":5,"expansion":null,"file_name":"src/haskell/basic.rs","is_primary":true,"label":null,"line_end":10,"line_start":10,"suggested_replacement":null,"suggestion_applicability":null,"text":[{"highlight_end":22,"highlight_start":5,"text":"use std::clone::Clone as CloneTrait;"}]}]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"error: aborting due to 17 previous errors; 11 warnings emitted\n\n","$message_type":"diagnostic","children":[],"code":null,"level":"error","message":"aborting due to 17 previous errors; 11 warnings emitted","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"Some errors have detailed explanations: E0252, E0277, E0308, E0412, E0432, E0433, E0533.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"Some errors have detailed explanations: E0252, E0277, E0308, E0412, E0432, E0433, E0533.","spans":[]}}
{"reason":"compiler-message","package_id":"path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0","manifest_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml","target":{"kind":["bin"],"crate_types":["bin"],"name":"basic_rust","src_path":"/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs","edition":"2021","doc":true,"doctest":false,"test":true},"message":{"rendered":"For more information about an error, try `rustc --explain E0252`.\n","$message_type":"diagnostic","children":[],"code":null,"level":"failure-note","message":"For more information about an error, try `rustc --explain E0252`.","spans":[]}}
{"reason":"build-finished","success":false}
