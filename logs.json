{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0432]: unresolved import `crate::HB`\n --> src/main.rs:2:5\n  |\n2 | use crate::HB;\n  |     ^^^^^^^^^ no `HB` in the root\n\n",
    "$message_type": "diagnostic",
    "children": [],
    "code": {
      "code": "E0432",
      "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
    },
    "level": "error",
    "message": "unresolved import `crate::HB`",
    "spans": [
      {
        "byte_end": 30,
        "byte_start": 21,
        "column_end": 14,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/main.rs",
        "is_primary": true,
        "label": "no `HB` in the root",
        "line_end": 2,
        "line_start": 2,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 14,
            "highlight_start": 5,
            "text": "use crate::HB;"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0432]: unresolved import `crate::HC`\n --> src/main.rs:3:5\n  |\n3 | use crate::HC;\n  |     ^^^^^^^^^ no `HC` in the root\n\n",
    "$message_type": "diagnostic",
    "children": [],
    "code": {
      "code": "E0432",
      "explanation": "An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"
    },
    "level": "error",
    "message": "unresolved import `crate::HC`",
    "spans": [
      {
        "byte_end": 45,
        "byte_start": 36,
        "column_end": 14,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/main.rs",
        "is_primary": true,
        "label": "no `HC` in the root",
        "line_end": 3,
        "line_start": 3,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 14,
            "highlight_start": 5,
            "text": "use crate::HC;"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0412]: cannot find type `T` in this scope\n  --> src/haskell/basic.rs:73:36\n   |\n73 | pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {\n   |                                    ^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n73 | pub fn list_drop<T>(n: usize, xs: Vec<T>) -> Vec<T> {\n   |                 +++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "you might be missing a type parameter",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1947,
            "byte_start": 1947,
            "column_end": 17,
            "column_start": 17,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 73,
            "line_start": 73,
            "suggested_replacement": "<T>",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 17,
                "text": "pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0412",
      "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
    },
    "level": "error",
    "message": "cannot find type `T` in this scope",
    "spans": [
      {
        "byte_end": 1967,
        "byte_start": 1966,
        "column_end": 37,
        "column_start": 36,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "not found in this scope",
        "line_end": 73,
        "line_start": 73,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 37,
            "highlight_start": 36,
            "text": "pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0412]: cannot find type `T` in this scope\n  --> src/haskell/basic.rs:73:47\n   |\n73 | pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {\n   |                                               ^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n73 | pub fn list_drop<T>(n: usize, xs: Vec<T>) -> Vec<T> {\n   |                 +++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "you might be missing a type parameter",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1947,
            "byte_start": 1947,
            "column_end": 17,
            "column_start": 17,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 73,
            "line_start": 73,
            "suggested_replacement": "<T>",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 17,
                "text": "pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0412",
      "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
    },
    "level": "error",
    "message": "cannot find type `T` in this scope",
    "spans": [
      {
        "byte_end": 1978,
        "byte_start": 1977,
        "column_end": 48,
        "column_start": 47,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "not found in this scope",
        "line_end": 73,
        "line_start": 73,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 48,
            "highlight_start": 47,
            "text": "pub fn list_drop(n: usize, xs: Vec<T>) -> Vec<T> {"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0425]: cannot find function `to_lower` in this scope\n  --> src/haskell/basic.rs:99:27\n   |\n99 |     input.chars().map(|c| to_lower(c)).collect()\n   |                           ^^^^^^^^ not found in this scope\n   |\nhelp: consider importing this function\n   |\n2  + use core::unicode::conversions::to_lower;\n   |\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider importing this function",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1,
            "byte_start": 1,
            "column_end": 1,
            "column_start": 1,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 2,
            "line_start": 2,
            "suggested_replacement": "use core::unicode::conversions::to_lower;\n\n",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 1,
                "highlight_start": 1,
                "text": "pub fn list_length<T>(input: &[T]) -> usize {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0425",
      "explanation": "An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"
    },
    "level": "error",
    "message": "cannot find function `to_lower` in this scope",
    "spans": [
      {
        "byte_end": 2565,
        "byte_start": 2557,
        "column_end": 35,
        "column_start": 27,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "not found in this scope",
        "line_end": 99,
        "line_start": 99,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 35,
            "highlight_start": 27,
            "text": "    input.chars().map(|c| to_lower(c)).collect()"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:18:31\n   |\n18 |     Success { message: Option<Text>, payload: A },\n   |                               ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n17 | pub enum Response<A, Text> {\n   |                    ++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "you might be missing a type parameter",
        "rendered": null,
        "spans": [
          {
            "byte_end": 194,
            "byte_start": 194,
            "column_end": 20,
            "column_start": 20,
            "expansion": null,
            "file_name": "src/haskell/types.rs",
            "is_primary": true,
            "label": null,
            "line_end": 17,
            "line_start": 17,
            "suggested_replacement": ", Text",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 20,
                "highlight_start": 20,
                "text": "pub enum Response<A> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0412",
      "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
    },
    "level": "error",
    "message": "cannot find type `Text` in this scope",
    "spans": [
      {
        "byte_end": 232,
        "byte_start": 228,
        "column_end": 35,
        "column_start": 31,
        "expansion": null,
        "file_name": "src/haskell/types.rs",
        "is_primary": true,
        "label": "not found in this scope",
        "line_end": 18,
        "line_start": 18,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 35,
            "highlight_start": 31,
            "text": "    Success { message: Option<Text>, payload: A },"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0412]: cannot find type `Text` in this scope\n  --> src/haskell/types.rs:19:45\n   |\n19 |     Failure { code: String, message: Option<Text> },\n   |                                             ^^^^ not found in this scope\n   |\nhelp: you might be missing a type parameter\n   |\n17 | pub enum Response<A, Text> {\n   |                    ++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "you might be missing a type parameter",
        "rendered": null,
        "spans": [
          {
            "byte_end": 194,
            "byte_start": 194,
            "column_end": 20,
            "column_start": 20,
            "expansion": null,
            "file_name": "src/haskell/types.rs",
            "is_primary": true,
            "label": null,
            "line_end": 17,
            "line_start": 17,
            "suggested_replacement": ", Text",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 20,
                "highlight_start": 20,
                "text": "pub enum Response<A> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0412",
      "explanation": "A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"
    },
    "level": "error",
    "message": "cannot find type `Text` in this scope",
    "spans": [
      {
        "byte_end": 297,
        "byte_start": 293,
        "column_end": 49,
        "column_start": 45,
        "expansion": null,
        "file_name": "src/haskell/types.rs",
        "is_primary": true,
        "label": "not found in this scope",
        "line_end": 19,
        "line_start": 19,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 49,
            "highlight_start": 45,
            "text": "    Failure { code: String, message: Option<Text> },"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> src/haskell/basic.rs:12:94\n    |\n12  |         _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),\n    |                                                                                              ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\nnote: required by a bound in `slice::<impl [T]>::to_vec`\n   --> /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs:414:12\n    |\n412 |     pub fn to_vec(&self) -> Vec<T>\n    |            ------ required by a bound in this associated function\n413 |     where\n414 |         T: Clone,\n    |            ^^^^^ required by this bound in `slice::<impl [T]>::to_vec`\nhelp: consider restricting type parameter `T`\n    |\n9   | pub fn list_reverse<T: std::clone::Clone>(list: Vec<T>) -> Vec<T> {\n    |                      +++++++++++++++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "required by a bound in `slice::<impl [T]>::to_vec`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 15861,
            "byte_start": 15855,
            "column_end": 18,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": false,
            "label": "required by a bound in this associated function",
            "line_end": 412,
            "line_start": 412,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 18,
                "highlight_start": 12,
                "text": "    pub fn to_vec(&self) -> Vec<T>"
              }
            ]
          },
          {
            "byte_end": 15905,
            "byte_start": 15900,
            "column_end": 17,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": true,
            "label": "required by this bound in `slice::<impl [T]>::to_vec`",
            "line_end": 414,
            "line_start": 414,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 12,
                "text": "        T: Clone,"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider restricting type parameter `T`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 161,
            "byte_start": 161,
            "column_end": 22,
            "column_start": 22,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 9,
            "line_start": 9,
            "suggested_replacement": ": std::clone::Clone",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 22,
                "highlight_start": 22,
                "text": "pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0277",
      "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
    },
    "level": "error",
    "message": "the trait bound `T: Clone` is not satisfied",
    "spans": [
      {
        "byte_end": 330,
        "byte_start": 324,
        "column_end": 100,
        "column_start": 94,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "the trait `Clone` is not implemented for `T`",
        "line_end": 12,
        "line_start": 12,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 100,
            "highlight_start": 94,
            "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0271]: type mismatch resolving `<Iter<'_, T> as IntoIterator>::Item == &&T`\n   --> src/haskell/basic.rs:12:58\n    |\n9   | pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {\n    |                     - found this type parameter\n...\n12  |         _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),\n    |                                                    ----- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `&&T`, found `&T`\n    |                                                    |\n    |                                                    required by a bound introduced by this call\n    |\n    = note: expected reference `&&_`\n               found reference `&_`\nnote: the method call chain might not have had the expected associated types\n   --> src/haskell/basic.rs:12:104\n    |\n12  |         _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),\n    |                                                          --------------------------------------------- ^^^^^^ `IntoIterator::Item` is `&T` here\n    |                                                          |\n    |                                                          this expression has type `Vec<T>`\nnote: required by a bound in `std::iter::Iterator::chain`\n   --> /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs:484:25\n    |\n481 |     fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>\n    |        ----- required by a bound in this associated function\n...\n484 |         U: IntoIterator<Item = Self::Item>,\n    |                         ^^^^^^^^^^^^^^^^^ required by this bound in `Iterator::chain`\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected reference `&&_`\n   found reference `&_`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "the method call chain might not have had the expected associated types",
        "rendered": null,
        "spans": [
          {
            "byte_end": 333,
            "byte_start": 288,
            "column_end": 103,
            "column_start": 58,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": false,
            "label": "this expression has type `Vec<T>`",
            "line_end": 12,
            "line_start": 12,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 103,
                "highlight_start": 58,
                "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
              }
            ]
          },
          {
            "byte_end": 340,
            "byte_start": 334,
            "column_end": 110,
            "column_start": 104,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": "`IntoIterator::Item` is `&T` here",
            "line_end": 12,
            "line_start": 12,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 110,
                "highlight_start": 104,
                "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "required by a bound in `std::iter::Iterator::chain`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 16327,
            "byte_start": 16322,
            "column_end": 13,
            "column_start": 8,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs",
            "is_primary": false,
            "label": "required by a bound in this associated function",
            "line_end": 481,
            "line_start": 481,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 13,
                "highlight_start": 8,
                "text": "    fn chain<U>(self, other: U) -> Chain<Self, U::IntoIter>"
              }
            ]
          },
          {
            "byte_end": 16447,
            "byte_start": 16430,
            "column_end": 42,
            "column_start": 25,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs",
            "is_primary": true,
            "label": "required by this bound in `Iterator::chain`",
            "line_end": 484,
            "line_start": 484,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 42,
                "highlight_start": 25,
                "text": "        U: IntoIterator<Item = Self::Item>,"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0271",
      "explanation": "A type mismatched an associated type of a trait.\n\nErroneous code example:\n\n```compile_fail,E0271\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType=u32> {\n//                    ~~~~~~~~ ~~~~~~~~~~~~~~~~~~\n//                        |            |\n//         This says `foo` can         |\n//           only be used with         |\n//              some type that         |\n//         implements `Trait`.         |\n//                                     |\n//                             This says not only must\n//                             `T` be an impl of `Trait`\n//                             but also that the impl\n//                             must assign the type `u32`\n//                             to the associated type.\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n//~~~~~~~~~~~~~~~   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n//      |                             |\n// `i8` does have                     |\n// implementation                     |\n// of `Trait`...                      |\n//                     ... but it is an implementation\n//                     that assigns `&'static str` to\n//                     the associated type.\n\nfoo(3_i8);\n// Here, we invoke `foo` with an `i8`, which does not satisfy\n// the constraint `<i8 as Trait>::AssociatedType=u32`, and\n// therefore the type-checker complains with this error code.\n```\n\nThe issue can be resolved by changing the associated type:\n1) in the `foo` implementation:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = &'static str> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = &'static str; }\n\nfoo(3_i8);\n```\n\n2) in the `Trait` implementation for `i8`:\n```\ntrait Trait { type AssociatedType; }\n\nfn foo<T>(t: T) where T: Trait<AssociatedType = u32> {\n    println!(\"in foo\");\n}\n\nimpl Trait for i8 { type AssociatedType = u32; }\n\nfoo(3_i8);\n```\n"
    },
    "level": "error",
    "message": "type mismatch resolving `<Iter<'_, T> as IntoIterator>::Item == &&T`",
    "spans": [
      {
        "byte_end": 340,
        "byte_start": 288,
        "column_end": 110,
        "column_start": 58,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "expected `&&T`, found `&T`",
        "line_end": 12,
        "line_start": 12,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 110,
            "highlight_start": 58,
            "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
          }
        ]
      },
      {
        "byte_end": 161,
        "byte_start": 160,
        "column_end": 22,
        "column_start": 21,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "found this type parameter",
        "line_end": 9,
        "line_start": 9,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 22,
            "highlight_start": 21,
            "text": "pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {"
          }
        ]
      },
      {
        "byte_end": 287,
        "byte_start": 282,
        "column_end": 57,
        "column_start": 52,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "required by a bound introduced by this call",
        "line_end": 12,
        "line_start": 12,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 57,
            "highlight_start": 52,
            "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0599]: the method `cloned` exists for struct `Chain<Iter<'_, &T>, Iter<'_, T>>`, but its trait bounds were not satisfied\n   |\n  ::: /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter.rs:65:1\n   |\n65 | pub struct Iter<'a, T: 'a> {\n   | -------------------------- doesn't satisfy `<std::slice::Iter<'_, T> as Iterator>::Item = &&T`\n   |\n  ::: /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/adapters/chain.rs:23:1\n   |\n23 | pub struct Chain<A, B> {\n   | ---------------------- doesn't satisfy `_: Iterator`\n  --> src/haskell/basic.rs:12:112\n   |\n12 |         _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),\n   |                                                                                                                ^^^^^^\n   |\n   = note: the following trait bounds were not satisfied:\n           `<std::slice::Iter<'_, T> as Iterator>::Item = &&T`\n           which is required by `std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`\n           `std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`\n           which is required by `&mut std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "the following trait bounds were not satisfied:\n`<std::slice::Iter<'_, T> as Iterator>::Item = &&T`\nwhich is required by `std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`\n`std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`\nwhich is required by `&mut std::iter::Chain<std::slice::Iter<'_, &T>, std::slice::Iter<'_, T>>: Iterator`",
        "rendered": null,
        "spans": []
      }
    ],
    "code": {
      "code": "E0599",
      "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
    },
    "level": "error",
    "message": "the method `cloned` exists for struct `Chain<Iter<'_, &T>, Iter<'_, T>>`, but its trait bounds were not satisfied",
    "spans": [
      {
        "byte_end": 1691,
        "byte_start": 1665,
        "column_end": 27,
        "column_start": 1,
        "expansion": null,
        "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/slice/iter.rs",
        "is_primary": false,
        "label": "doesn't satisfy `<std::slice::Iter<'_, T> as Iterator>::Item = &&T`",
        "line_end": 65,
        "line_start": 65,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 27,
            "highlight_start": 1,
            "text": "pub struct Iter<'a, T: 'a> {"
          }
        ]
      },
      {
        "byte_end": 641,
        "byte_start": 619,
        "column_end": 23,
        "column_start": 1,
        "expansion": null,
        "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/iter/adapters/chain.rs",
        "is_primary": false,
        "label": "doesn't satisfy `_: Iterator`",
        "line_end": 23,
        "line_start": 23,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 23,
            "highlight_start": 1,
            "text": "pub struct Chain<A, B> {"
          }
        ]
      },
      {
        "byte_end": 348,
        "byte_start": 342,
        "column_end": 118,
        "column_start": 112,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": null,
        "line_end": 12,
        "line_start": 12,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 118,
            "highlight_start": 112,
            "text": "        _ => [list.last().unwrap().clone()].iter().chain(list_reverse(list[..list.len() - 1].to_vec()).iter()).cloned().collect(),"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0599]: no method named `clone` found for type parameter `T` in the current scope\n  --> src/haskell/basic.rs:42:34\n   |\n40 | pub fn list_head<T>(list: Vec<T>) -> Option<T> {\n   |                  - method `clone` not found for this type parameter\n41 |     match list.first() {\n42 |         Some(&head) => Some(head.clone()),\n   |                                  ^^^^^ method not found in `T`\n   |\n   = help: items from traits can only be used if the type parameter is bounded by the trait\nhelp: the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it:\n   |\n40 | pub fn list_head<T: Clone>(list: Vec<T>) -> Option<T> {\n   |                   +++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "items from traits can only be used if the type parameter is bounded by the trait",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "the following trait defines an item `clone`, perhaps you need to restrict type parameter `T` with it:",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1056,
            "byte_start": 1056,
            "column_end": 19,
            "column_start": 19,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 40,
            "line_start": 40,
            "suggested_replacement": ": Clone",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 19,
                "highlight_start": 19,
                "text": "pub fn list_head<T>(list: Vec<T>) -> Option<T> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0599",
      "explanation": "This error occurs when a method is used on a type which doesn't implement it:\n\nErroneous code example:\n\n```compile_fail,E0599\nstruct Mouth;\n\nlet x = Mouth;\nx.chocolate(); // error: no method named `chocolate` found for type `Mouth`\n               //        in the current scope\n```\n\nIn this case, you need to implement the `chocolate` method to fix the error:\n\n```\nstruct Mouth;\n\nimpl Mouth {\n    fn chocolate(&self) { // We implement the `chocolate` method here.\n        println!(\"Hmmm! I love chocolate!\");\n    }\n}\n\nlet x = Mouth;\nx.chocolate(); // ok!\n```\n"
    },
    "level": "error",
    "message": "no method named `clone` found for type parameter `T` in the current scope",
    "spans": [
      {
        "byte_end": 1150,
        "byte_start": 1145,
        "column_end": 39,
        "column_start": 34,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "method not found in `T`",
        "line_end": 42,
        "line_start": 42,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 39,
            "highlight_start": 34,
            "text": "        Some(&head) => Some(head.clone()),"
          }
        ]
      },
      {
        "byte_end": 1056,
        "byte_start": 1055,
        "column_end": 19,
        "column_start": 18,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "method `clone` not found for this type parameter",
        "line_end": 40,
        "line_start": 40,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 19,
            "highlight_start": 18,
            "text": "pub fn list_head<T>(list: Vec<T>) -> Option<T> {"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> src/haskell/basic.rs:50:33\n    |\n50  |         _ => Ok(input_list[1..].to_vec()),\n    |                                 ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\nnote: required by a bound in `slice::<impl [T]>::to_vec`\n   --> /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs:414:12\n    |\n412 |     pub fn to_vec(&self) -> Vec<T>\n    |            ------ required by a bound in this associated function\n413 |     where\n414 |         T: Clone,\n    |            ^^^^^ required by this bound in `slice::<impl [T]>::to_vec`\nhelp: consider restricting type parameter `T`\n    |\n47  | pub fn list_tail<T: std::clone::Clone>(input_list: Vec<T>) -> Result<Vec<T>, String> {\n    |                   +++++++++++++++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "required by a bound in `slice::<impl [T]>::to_vec`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 15861,
            "byte_start": 15855,
            "column_end": 18,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": false,
            "label": "required by a bound in this associated function",
            "line_end": 412,
            "line_start": 412,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 18,
                "highlight_start": 12,
                "text": "    pub fn to_vec(&self) -> Vec<T>"
              }
            ]
          },
          {
            "byte_end": 15905,
            "byte_start": 15900,
            "column_end": 17,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": true,
            "label": "required by this bound in `slice::<impl [T]>::to_vec`",
            "line_end": 414,
            "line_start": 414,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 12,
                "text": "        T: Clone,"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider restricting type parameter `T`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1204,
            "byte_start": 1204,
            "column_end": 19,
            "column_start": 19,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 47,
            "line_start": 47,
            "suggested_replacement": ": std::clone::Clone",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 19,
                "highlight_start": 19,
                "text": "pub fn list_tail<T>(input_list: Vec<T>) -> Result<Vec<T>, String> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0277",
      "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
    },
    "level": "error",
    "message": "the trait bound `T: Clone` is not satisfied",
    "spans": [
      {
        "byte_end": 1376,
        "byte_start": 1370,
        "column_end": 39,
        "column_start": 33,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "the trait `Clone` is not implemented for `T`",
        "line_end": 50,
        "line_start": 50,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 39,
            "highlight_start": 33,
            "text": "        _ => Ok(input_list[1..].to_vec()),"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0308]: mismatched types\n  --> src/haskell/basic.rs:57:37\n   |\n57 |         [_, tail @ ..] => list_last(tail),\n   |                           --------- ^^^^ expected `&Vec<A>`, found `&[A]`\n   |                           |\n   |                           arguments to this function are incorrect\n   |\n   = note: expected reference `&Vec<A>`\n              found reference `&[A]`\nnote: function defined here\n  --> src/haskell/basic.rs:54:8\n   |\n54 | pub fn list_last<A>(input_list: &Vec<A>) -> Result<&A, &str> {\n   |        ^^^^^^^^^    -------------------\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected reference `&Vec<A>`\n   found reference `&[A]`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "function defined here",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1429,
            "byte_start": 1410,
            "column_end": 40,
            "column_start": 21,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": false,
            "label": "",
            "line_end": 54,
            "line_start": 54,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 40,
                "highlight_start": 21,
                "text": "pub fn list_last<A>(input_list: &Vec<A>) -> Result<&A, &str> {"
              }
            ]
          },
          {
            "byte_end": 1406,
            "byte_start": 1397,
            "column_end": 17,
            "column_start": 8,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 54,
            "line_start": 54,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 8,
                "text": "pub fn list_last<A>(input_list: &Vec<A>) -> Result<&A, &str> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0308",
      "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
    },
    "level": "error",
    "message": "mismatched types",
    "spans": [
      {
        "byte_end": 1571,
        "byte_start": 1567,
        "column_end": 41,
        "column_start": 37,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "expected `&Vec<A>`, found `&[A]`",
        "line_end": 57,
        "line_start": 57,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 41,
            "highlight_start": 37,
            "text": "        [_, tail @ ..] => list_last(tail),"
          }
        ]
      },
      {
        "byte_end": 1566,
        "byte_start": 1557,
        "column_end": 36,
        "column_start": 27,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "arguments to this function are incorrect",
        "line_end": 57,
        "line_start": 57,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 36,
            "highlight_start": 27,
            "text": "        [_, tail @ ..] => list_last(tail),"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0277]: the trait bound `T: Clone` is not satisfied\n   --> src/haskell/basic.rs:66:52\n    |\n66  |             let mut result = list_take(n - 1, tail.to_vec());\n    |                                                    ^^^^^^ the trait `Clone` is not implemented for `T`\n    |\nnote: required by a bound in `slice::<impl [T]>::to_vec`\n   --> /Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs:414:12\n    |\n412 |     pub fn to_vec(&self) -> Vec<T>\n    |            ------ required by a bound in this associated function\n413 |     where\n414 |         T: Clone,\n    |            ^^^^^ required by this bound in `slice::<impl [T]>::to_vec`\nhelp: consider restricting type parameter `T`\n    |\n62  | pub fn list_take<T: std::clone::Clone>(n: usize, list: Vec<T>) -> Vec<T> {\n    |                   +++++++++++++++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "required by a bound in `slice::<impl [T]>::to_vec`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 15861,
            "byte_start": 15855,
            "column_end": 18,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": false,
            "label": "required by a bound in this associated function",
            "line_end": 412,
            "line_start": 412,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 18,
                "highlight_start": 12,
                "text": "    pub fn to_vec(&self) -> Vec<T>"
              }
            ]
          },
          {
            "byte_end": 15905,
            "byte_start": 15900,
            "column_end": 17,
            "column_start": 12,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/slice.rs",
            "is_primary": true,
            "label": "required by this bound in `slice::<impl [T]>::to_vec`",
            "line_end": 414,
            "line_start": 414,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 17,
                "highlight_start": 12,
                "text": "        T: Clone,"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider restricting type parameter `T`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1646,
            "byte_start": 1646,
            "column_end": 19,
            "column_start": 19,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 62,
            "line_start": 62,
            "suggested_replacement": ": std::clone::Clone",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 19,
                "highlight_start": 19,
                "text": "pub fn list_take<T>(n: usize, list: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0277",
      "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
    },
    "level": "error",
    "message": "the trait bound `T: Clone` is not satisfied",
    "spans": [
      {
        "byte_end": 1851,
        "byte_start": 1845,
        "column_end": 58,
        "column_start": 52,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "the trait `Clone` is not implemented for `T`",
        "line_end": 66,
        "line_start": 66,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 58,
            "highlight_start": 52,
            "text": "            let mut result = list_take(n - 1, tail.to_vec());"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0308]: mismatched types\n   --> src/haskell/basic.rs:103:18\n    |\n103 |     list_reverse(input)\n    |     ------------ ^^^^^ expected `Vec<_>`, found `String`\n    |     |\n    |     arguments to this function are incorrect\n    |\n    = note: expected struct `Vec<_>`\n               found struct `String`\nnote: function defined here\n   --> src/haskell/basic.rs:9:8\n    |\n9   | pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {\n    |        ^^^^^^^^^^^^    ------------\nhelp: call `Into::into` on this expression to convert `String` into `Vec<_>`\n    |\n103 |     list_reverse(input.into())\n    |                       +++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected struct `Vec<_>`\n   found struct `String`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "function defined here",
        "rendered": null,
        "spans": [
          {
            "byte_end": 175,
            "byte_start": 163,
            "column_end": 36,
            "column_start": 24,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": false,
            "label": "",
            "line_end": 9,
            "line_start": 9,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 36,
                "highlight_start": 24,
                "text": "pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {"
              }
            ]
          },
          {
            "byte_end": 159,
            "byte_start": 147,
            "column_end": 20,
            "column_start": 8,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 9,
            "line_start": 9,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 20,
                "highlight_start": 8,
                "text": "pub fn list_reverse<T>(list: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "call `Into::into` on this expression to convert `String` into `Vec<_>`",
        "rendered": null,
        "spans": [
          {
            "byte_end": 2654,
            "byte_start": 2654,
            "column_end": 23,
            "column_start": 23,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 103,
            "line_start": 103,
            "suggested_replacement": ".into()",
            "suggestion_applicability": "MaybeIncorrect",
            "text": [
              {
                "highlight_end": 23,
                "highlight_start": 23,
                "text": "    list_reverse(input)"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0308",
      "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
    },
    "level": "error",
    "message": "mismatched types",
    "spans": [
      {
        "byte_end": 2654,
        "byte_start": 2649,
        "column_end": 23,
        "column_start": 18,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "expected `Vec<_>`, found `String`",
        "line_end": 103,
        "line_start": 103,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 23,
            "highlight_start": 18,
            "text": "    list_reverse(input)"
          }
        ]
      },
      {
        "byte_end": 2648,
        "byte_start": 2636,
        "column_end": 17,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "arguments to this function are incorrect",
        "line_end": 103,
        "line_start": 103,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 17,
            "highlight_start": 5,
            "text": "    list_reverse(input)"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0308]: mismatched types\n   --> src/haskell/basic.rs:103:5\n    |\n102 | pub fn string_reverse(input: String) -> String {\n    |                                         ------ expected `String` because of return type\n103 |     list_reverse(input)\n    |     ^^^^^^^^^^^^^^^^^^^ expected `String`, found `Vec<_>`\n    |\n    = note: expected struct `String`\n               found struct `Vec<_>`\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected struct `String`\n   found struct `Vec<_>`",
        "rendered": null,
        "spans": []
      }
    ],
    "code": {
      "code": "E0308",
      "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
    },
    "level": "error",
    "message": "mismatched types",
    "spans": [
      {
        "byte_end": 2655,
        "byte_start": 2636,
        "column_end": 24,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "expected `String`, found `Vec<_>`",
        "line_end": 103,
        "line_start": 103,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 24,
            "highlight_start": 5,
            "text": "    list_reverse(input)"
          }
        ]
      },
      {
        "byte_end": 2629,
        "byte_start": 2623,
        "column_end": 47,
        "column_start": 41,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "expected `String` because of return type",
        "line_end": 102,
        "line_start": 102,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 47,
            "highlight_start": 41,
            "text": "pub fn string_reverse(input: String) -> String {"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0061]: this function takes 2 arguments but 0 arguments were supplied\n   --> src/haskell/basic.rs:110:5\n    |\n110 |     list_concat::<T>()\n    |     ^^^^^^^^^^^^^^^^-- two arguments of type `Vec<T>` and `Vec<T>` are missing\n    |\nnote: function defined here\n   --> src/haskell/basic.rs:16:8\n    |\n16  | pub fn list_concat<T>(xs: Vec<T>, ys: Vec<T>) -> Vec<T> {\n    |        ^^^^^^^^^^^    ----------  ----------\nhelp: provide the arguments\n    |\n110 |     list_concat::<T>(/* Vec<T> */, /* Vec<T> */)\n    |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "function defined here",
        "rendered": null,
        "spans": [
          {
            "byte_end": 403,
            "byte_start": 393,
            "column_end": 33,
            "column_start": 23,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": false,
            "label": "",
            "line_end": 16,
            "line_start": 16,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 33,
                "highlight_start": 23,
                "text": "pub fn list_concat<T>(xs: Vec<T>, ys: Vec<T>) -> Vec<T> {"
              }
            ]
          },
          {
            "byte_end": 415,
            "byte_start": 405,
            "column_end": 45,
            "column_start": 35,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": false,
            "label": "",
            "line_end": 16,
            "line_start": 16,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 45,
                "highlight_start": 35,
                "text": "pub fn list_concat<T>(xs: Vec<T>, ys: Vec<T>) -> Vec<T> {"
              }
            ]
          },
          {
            "byte_end": 389,
            "byte_start": 378,
            "column_end": 19,
            "column_start": 8,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 16,
            "line_start": 16,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 19,
                "highlight_start": 8,
                "text": "pub fn list_concat<T>(xs: Vec<T>, ys: Vec<T>) -> Vec<T> {"
              }
            ]
          }
        ]
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "provide the arguments",
        "rendered": null,
        "spans": [
          {
            "byte_end": 2742,
            "byte_start": 2740,
            "column_end": 23,
            "column_start": 21,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 110,
            "line_start": 110,
            "suggested_replacement": "(/* Vec<T> */, /* Vec<T> */)",
            "suggestion_applicability": "HasPlaceholders",
            "text": [
              {
                "highlight_end": 23,
                "highlight_start": 21,
                "text": "    list_concat::<T>()"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0061",
      "explanation": "An invalid number of arguments was passed when calling a function.\n\nErroneous code example:\n\n```compile_fail,E0061\nfn f(u: i32) {}\n\nf(); // error!\n```\n\nThe number of arguments passed to a function must match the number of arguments\nspecified in the function signature.\n\nFor example, a function like:\n\n```\nfn f(a: u16, b: &str) {}\n```\n\nMust always be called with exactly two arguments, e.g., `f(2, \"test\")`.\n\nNote that Rust does not have a notion of optional function arguments or\nvariadic functions (except for its C-FFI).\n"
    },
    "level": "error",
    "message": "this function takes 2 arguments but 0 arguments were supplied",
    "spans": [
      {
        "byte_end": 2742,
        "byte_start": 2740,
        "column_end": 23,
        "column_start": 21,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "two arguments of type `Vec<T>` and `Vec<T>` are missing",
        "line_end": 110,
        "line_start": 110,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 23,
            "highlight_start": 21,
            "text": "    list_concat::<T>()"
          }
        ]
      },
      {
        "byte_end": 2740,
        "byte_start": 2724,
        "column_end": 21,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": null,
        "line_end": 110,
        "line_start": 110,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 21,
            "highlight_start": 5,
            "text": "    list_concat::<T>()"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0308]: mismatched types\n   --> src/haskell/basic.rs:110:5\n    |\n106 | pub fn string_concat<T>() -> String\n    |                              ------ expected `String` because of return type\n...\n110 |     list_concat::<T>()\n    |     ^^^^^^^^^^^^^^^^^^ expected `String`, found `Vec<T>`\n    |\n    = note: expected struct `String`\n               found struct `Vec<T>`\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected struct `String`\n   found struct `Vec<T>`",
        "rendered": null,
        "spans": []
      }
    ],
    "code": {
      "code": "E0308",
      "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
    },
    "level": "error",
    "message": "mismatched types",
    "spans": [
      {
        "byte_end": 2742,
        "byte_start": 2724,
        "column_end": 23,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "expected `String`, found `Vec<T>`",
        "line_end": 110,
        "line_start": 110,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 23,
            "highlight_start": 5,
            "text": "    list_concat::<T>()"
          }
        ]
      },
      {
        "byte_end": 2694,
        "byte_start": 2688,
        "column_end": 36,
        "column_start": 30,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "expected `String` because of return type",
        "line_end": 106,
        "line_start": 106,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 36,
            "highlight_start": 30,
            "text": "pub fn string_concat<T>() -> String"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0308]: mismatched types\n  --> src/haskell/compute.rs:10:52\n   |\n10 | pub fn mul<T: std::ops::Mul>(a: T, b: T) -> T {    a * b}\n   |            -                                -      ^^^^^ expected type parameter `T`, found associated type\n   |            |                                |\n   |            expected this type parameter     expected `T` because of return type\n   |\n   = note: expected type parameter `T`\n             found associated type `<T as Mul>::Output`\n   = note: the caller chooses a type for `T` which can be different from `<T as Mul>::Output`\nhelp: consider further restricting this bound\n   |\n10 | pub fn mul<T: std::ops::Mul<Output = T>>(a: T, b: T) -> T {    a * b}\n   |                            ++++++++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "expected type parameter `T`\n  found associated type `<T as Mul>::Output`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "the caller chooses a type for `T` which can be different from `<T as Mul>::Output`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider further restricting this bound",
        "rendered": null,
        "spans": [
          {
            "byte_end": 148,
            "byte_start": 148,
            "column_end": 28,
            "column_start": 28,
            "expansion": null,
            "file_name": "src/haskell/compute.rs",
            "is_primary": true,
            "label": null,
            "line_end": 10,
            "line_start": 10,
            "suggested_replacement": "<Output = T>",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 28,
                "highlight_start": 28,
                "text": "pub fn mul<T: std::ops::Mul>(a: T, b: T) -> T {    a * b}"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0308",
      "explanation": "Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"
    },
    "level": "error",
    "message": "mismatched types",
    "spans": [
      {
        "byte_end": 177,
        "byte_start": 172,
        "column_end": 57,
        "column_start": 52,
        "expansion": null,
        "file_name": "src/haskell/compute.rs",
        "is_primary": true,
        "label": "expected type parameter `T`, found associated type",
        "line_end": 10,
        "line_start": 10,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 57,
            "highlight_start": 52,
            "text": "pub fn mul<T: std::ops::Mul>(a: T, b: T) -> T {    a * b}"
          }
        ]
      },
      {
        "byte_end": 133,
        "byte_start": 132,
        "column_end": 13,
        "column_start": 12,
        "expansion": null,
        "file_name": "src/haskell/compute.rs",
        "is_primary": false,
        "label": "expected this type parameter",
        "line_end": 10,
        "line_start": 10,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 13,
            "highlight_start": 12,
            "text": "pub fn mul<T: std::ops::Mul>(a: T, b: T) -> T {    a * b}"
          }
        ]
      },
      {
        "byte_end": 166,
        "byte_start": 165,
        "column_end": 46,
        "column_start": 45,
        "expansion": null,
        "file_name": "src/haskell/compute.rs",
        "is_primary": false,
        "label": "expected `T` because of return type",
        "line_end": 10,
        "line_start": 10,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 46,
            "highlight_start": 45,
            "text": "pub fn mul<T: std::ops::Mul>(a: T, b: T) -> T {    a * b}"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0277]: `Response<A>` doesn't implement `Debug`\n  --> src/haskell/types.rs:23:25\n   |\n23 |         format!(\"{:?}\", self)\n   |                         ^^^^ `Response<A>` cannot be formatted using `{:?}`\n   |\n   = help: the trait `Debug` is not implemented for `Response<A>`, which is required by `&Response<A>: Debug`\n   = note: add `#[derive(Debug)]` to `Response<A>` or manually `impl Debug for Response<A>`\n   = note: this error originates in the macro `$crate::__export::format_args` which comes from the expansion of the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "the trait `Debug` is not implemented for `Response<A>`, which is required by `&Response<A>: Debug`",
        "rendered": null,
        "spans": []
      },
      {
        "children": [],
        "code": null,
        "level": "note",
        "message": "add `#[derive(Debug)]` to `Response<A>` or manually `impl Debug for Response<A>`",
        "rendered": null,
        "spans": []
      }
    ],
    "code": {
      "code": "E0277",
      "explanation": "You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"
    },
    "level": "error",
    "message": "`Response<A>` doesn't implement `Debug`",
    "spans": [
      {
        "byte_end": 389,
        "byte_start": 385,
        "column_end": 29,
        "column_start": 25,
        "expansion": {
          "def_site_span": {
            "byte_end": 35394,
            "byte_start": 35370,
            "column_end": 29,
            "column_start": 5,
            "expansion": null,
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs",
            "is_primary": false,
            "label": null,
            "line_end": 1012,
            "line_start": 1012,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 29,
                "highlight_start": 5,
                "text": "    macro_rules! format_args {"
              }
            ]
          },
          "macro_decl_name": "$crate::__export::format_args!",
          "span": {
            "byte_end": 4631,
            "byte_start": 4591,
            "column_end": 79,
            "column_start": 39,
            "expansion": {
              "def_site_span": {
                "byte_end": 4526,
                "byte_start": 4507,
                "column_end": 20,
                "column_start": 1,
                "expansion": null,
                "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs",
                "is_primary": false,
                "label": null,
                "line_end": 123,
                "line_start": 123,
                "suggested_replacement": null,
                "suggestion_applicability": null,
                "text": [
                  {
                    "highlight_end": 20,
                    "highlight_start": 1,
                    "text": "macro_rules! format {"
                  }
                ]
              },
              "macro_decl_name": "format!",
              "span": {
                "byte_end": 390,
                "byte_start": 369,
                "column_end": 30,
                "column_start": 9,
                "expansion": null,
                "file_name": "src/haskell/types.rs",
                "is_primary": false,
                "label": null,
                "line_end": 23,
                "line_start": 23,
                "suggested_replacement": null,
                "suggestion_applicability": null,
                "text": [
                  {
                    "highlight_end": 30,
                    "highlight_start": 9,
                    "text": "        format!(\"{:?}\", self)"
                  }
                ]
              }
            },
            "file_name": "/Users/priyanshbhardwaj/.rustup/toolchains/stable-x86_64-apple-darwin/lib/rustlib/src/rust/library/alloc/src/macros.rs",
            "is_primary": false,
            "label": null,
            "line_end": 125,
            "line_start": 125,
            "suggested_replacement": null,
            "suggestion_applicability": null,
            "text": [
              {
                "highlight_end": 79,
                "highlight_start": 39,
                "text": "        let res = $crate::fmt::format($crate::__export::format_args!($($arg)*));"
              }
            ]
          }
        },
        "file_name": "src/haskell/types.rs",
        "is_primary": true,
        "label": "`Response<A>` cannot be formatted using `{:?}`",
        "line_end": 23,
        "line_start": 23,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 29,
            "highlight_start": 25,
            "text": "        format!(\"{:?}\", self)"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0596]: cannot borrow `acc` as mutable, as it is not declared as mutable\n  --> src/haskell/basic.rs:17:40\n   |\n17 |     ys.into_iter().fold(xs, |acc, x| { acc.push(x); acc })\n   |                                        ^^^ cannot borrow as mutable\n   |\nhelp: consider changing this to be mutable\n   |\n17 |     ys.into_iter().fold(xs, |mut acc, x| { acc.push(x); acc })\n   |                              +++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider changing this to be mutable",
        "rendered": null,
        "spans": [
          {
            "byte_end": 458,
            "byte_start": 458,
            "column_end": 30,
            "column_start": 30,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 17,
            "line_start": 17,
            "suggested_replacement": "mut ",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 30,
                "highlight_start": 30,
                "text": "    ys.into_iter().fold(xs, |acc, x| { acc.push(x); acc })"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0596",
      "explanation": "This error occurs because you tried to mutably borrow a non-mutable variable.\n\nErroneous code example:\n\n```compile_fail,E0596\nlet x = 1;\nlet y = &mut x; // error: cannot borrow mutably\n```\n\nIn here, `x` isn't mutable, so when we try to mutably borrow it in `y`, it\nfails. To fix this error, you need to make `x` mutable:\n\n```\nlet mut x = 1;\nlet y = &mut x; // ok!\n```\n"
    },
    "level": "error",
    "message": "cannot borrow `acc` as mutable, as it is not declared as mutable",
    "spans": [
      {
        "byte_end": 471,
        "byte_start": 468,
        "column_end": 43,
        "column_start": 40,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "cannot borrow as mutable",
        "line_end": 17,
        "line_start": 17,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 43,
            "highlight_start": 40,
            "text": "    ys.into_iter().fold(xs, |acc, x| { acc.push(x); acc })"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0507]: cannot move out of a shared reference\n  --> src/haskell/basic.rs:37:34\n   |\n37 |     elements.into_iter().filter(|&x| p(&x)).collect()\n   |                                  ^-\n   |                                   |\n   |                                   data moved here\n   |                                   move occurs because `x` has type `T`, which does not implement the `Copy` trait\n   |\nhelp: consider removing the borrow\n   |\n37 -     elements.into_iter().filter(|&x| p(&x)).collect()\n37 +     elements.into_iter().filter(|x| p(&x)).collect()\n   |\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider removing the borrow",
        "rendered": null,
        "spans": [
          {
            "byte_end": 1015,
            "byte_start": 1014,
            "column_end": 35,
            "column_start": 34,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 37,
            "line_start": 37,
            "suggested_replacement": "",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 35,
                "highlight_start": 34,
                "text": "    elements.into_iter().filter(|&x| p(&x)).collect()"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0507",
      "explanation": "A borrowed value was moved out.\n\nErroneous code example:\n\n```compile_fail,E0507\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // error: cannot move out of borrowed content\n}\n```\n\nHere, the `nothing_is_true` method takes the ownership of `self`. However,\n`self` cannot be moved because `.borrow()` only provides an `&TheDarkKnight`,\nwhich is a borrow of the content owned by the `RefCell`. To fix this error,\nyou have three choices:\n\n* Try to avoid moving the variable.\n* Somehow reclaim the ownership.\n* Implement the `Copy` trait on the type.\n\nThis can also happen when using a type implementing `Fn` or `FnMut`, as neither\nallows moving out of them (they usually represent closures which can be called\nmore than once). Much of the text following applies equally well to non-`FnOnce`\nclosure bodies.\n\nExamples:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(&self) {} // First case, we don't take ownership\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n    let x = x.into_inner(); // we get back ownership\n\n    x.nothing_is_true(); // ok!\n}\n```\n\nOr:\n\n```\nuse std::cell::RefCell;\n\n#[derive(Clone, Copy)] // we implement the Copy trait\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nfn main() {\n    let x = RefCell::new(TheDarkKnight);\n\n    x.borrow().nothing_is_true(); // ok!\n}\n```\n\nMoving a member out of a mutably borrowed struct will also cause E0507 error:\n\n```compile_fail,E0507\nstruct TheDarkKnight;\n\nimpl TheDarkKnight {\n    fn nothing_is_true(self) {}\n}\n\nstruct Batcave {\n    knight: TheDarkKnight\n}\n\nfn main() {\n    let mut cave = Batcave {\n        knight: TheDarkKnight\n    };\n    let borrowed = &mut cave;\n\n    borrowed.knight.nothing_is_true(); // E0507\n}\n```\n\nIt is fine only if you put something back. `mem::replace` can be used for that:\n\n```\n# struct TheDarkKnight;\n# impl TheDarkKnight { fn nothing_is_true(self) {} }\n# struct Batcave { knight: TheDarkKnight }\nuse std::mem;\n\nlet mut cave = Batcave {\n    knight: TheDarkKnight\n};\nlet borrowed = &mut cave;\n\nmem::replace(&mut borrowed.knight, TheDarkKnight).nothing_is_true(); // ok!\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"
    },
    "level": "error",
    "message": "cannot move out of a shared reference",
    "spans": [
      {
        "byte_end": 1016,
        "byte_start": 1015,
        "column_end": 36,
        "column_start": 35,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "data moved here",
        "line_end": 37,
        "line_start": 37,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 36,
            "highlight_start": 35,
            "text": "    elements.into_iter().filter(|&x| p(&x)).collect()"
          }
        ]
      },
      {
        "byte_end": 1016,
        "byte_start": 1015,
        "column_end": 36,
        "column_start": 35,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "move occurs because `x` has type `T`, which does not implement the `Copy` trait",
        "line_end": 37,
        "line_start": 37,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 36,
            "highlight_start": 35,
            "text": "    elements.into_iter().filter(|&x| p(&x)).collect()"
          }
        ]
      },
      {
        "byte_end": 1016,
        "byte_start": 1014,
        "column_end": 36,
        "column_start": 34,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": null,
        "line_end": 37,
        "line_start": 37,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 36,
            "highlight_start": 34,
            "text": "    elements.into_iter().filter(|&x| p(&x)).collect()"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error[E0505]: cannot move out of `s` because it is borrowed\n   --> src/haskell/basic.rs:114:48\n    |\n113 | pub fn string_is_palindrome(s: String) -> bool {\n    |                             - binding `s` declared here\n114 |     s == crate::haskell::basic::string_reverse(s)\n    |     - borrow of `s` occurs here                ^ move out of `s` occurs here\n    |\nhelp: consider cloning the value if the performance cost is acceptable\n    |\n114 |     s.clone() == crate::haskell::basic::string_reverse(s)\n    |      ++++++++\n\n",
    "$message_type": "diagnostic",
    "children": [
      {
        "children": [],
        "code": null,
        "level": "help",
        "message": "consider cloning the value if the performance cost is acceptable",
        "rendered": null,
        "spans": [
          {
            "byte_end": 2800,
            "byte_start": 2800,
            "column_end": 6,
            "column_start": 6,
            "expansion": null,
            "file_name": "src/haskell/basic.rs",
            "is_primary": true,
            "label": null,
            "line_end": 114,
            "line_start": 114,
            "suggested_replacement": ".clone()",
            "suggestion_applicability": "MachineApplicable",
            "text": [
              {
                "highlight_end": 6,
                "highlight_start": 6,
                "text": "    s == crate::haskell::basic::string_reverse(s)"
              }
            ]
          }
        ]
      }
    ],
    "code": {
      "code": "E0505",
      "explanation": "A value was moved out while it was still borrowed.\n\nErroneous code example:\n\n```compile_fail,E0505\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    let _ref_to_val: &Value = &x;\n    eat(x);\n    borrow(_ref_to_val);\n}\n```\n\nHere, the function `eat` takes ownership of `x`. However,\n`x` cannot be moved because the borrow to `_ref_to_val`\nneeds to last till the function `borrow`.\nTo fix that you can do a few different things:\n\n* Try to avoid moving the variable.\n* Release borrow before move.\n* Implement the `Copy` trait on the type.\n\nExamples:\n\n```\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: &Value) {}\n\nfn main() {\n    let x = Value{};\n\n    let ref_to_val: &Value = &x;\n    eat(&x); // pass by reference, if it's possible\n    borrow(ref_to_val);\n}\n```\n\nOr:\n\n```\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n\n    let ref_to_val: &Value = &x;\n    borrow(ref_to_val);\n    // ref_to_val is no longer used.\n    eat(x);\n}\n```\n\nOr:\n\n```\n#[derive(Clone, Copy)] // implement Copy trait\nstruct Value {}\n\nfn borrow(val: &Value) {}\n\nfn eat(val: Value) {}\n\nfn main() {\n    let x = Value{};\n    let ref_to_val: &Value = &x;\n    eat(x); // it will be copied here.\n    borrow(ref_to_val);\n}\n```\n\nFor more information on Rust's ownership system, take a look at the\n[References & Borrowing][references-and-borrowing] section of the Book.\n\n[references-and-borrowing]: https://doc.rust-lang.org/book/ch04-02-references-and-borrowing.html\n"
    },
    "level": "error",
    "message": "cannot move out of `s` because it is borrowed",
    "spans": [
      {
        "byte_end": 2843,
        "byte_start": 2842,
        "column_end": 49,
        "column_start": 48,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": true,
        "label": "move out of `s` occurs here",
        "line_end": 114,
        "line_start": 114,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 49,
            "highlight_start": 48,
            "text": "    s == crate::haskell::basic::string_reverse(s)"
          }
        ]
      },
      {
        "byte_end": 2800,
        "byte_start": 2799,
        "column_end": 6,
        "column_start": 5,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "borrow of `s` occurs here",
        "line_end": 114,
        "line_start": 114,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 6,
            "highlight_start": 5,
            "text": "    s == crate::haskell::basic::string_reverse(s)"
          }
        ]
      },
      {
        "byte_end": 2775,
        "byte_start": 2774,
        "column_end": 30,
        "column_start": 29,
        "expansion": null,
        "file_name": "src/haskell/basic.rs",
        "is_primary": false,
        "label": "binding `s` declared here",
        "line_end": 113,
        "line_start": 113,
        "suggested_replacement": null,
        "suggestion_applicability": null,
        "text": [
          {
            "highlight_end": 30,
            "highlight_start": 29,
            "text": "pub fn string_is_palindrome(s: String) -> bool {"
          }
        ]
      }
    ]
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "error: aborting due to 23 previous errors\n\n",
    "$message_type": "diagnostic",
    "children": [],
    "code": null,
    "level": "error",
    "message": "aborting due to 23 previous errors",
    "spans": []
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "Some errors have detailed explanations: E0061, E0271, E0277, E0308, E0412, E0425, E0432, E0505, E0507...\n",
    "$message_type": "diagnostic",
    "children": [],
    "code": null,
    "level": "failure-note",
    "message": "Some errors have detailed explanations: E0061, E0271, E0277, E0308, E0412, E0425, E0432, E0505, E0507...",
    "spans": []
  }
}
{
  "reason": "compiler-message",
  "package_id": "path+file:///Users/priyanshbhardwaj/Documents/rust-migration/basic_rust#0.1.0",
  "manifest_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/Cargo.toml",
  "target": {
    "kind": [
      "bin"
    ],
    "crate_types": [
      "bin"
    ],
    "name": "basic_rust",
    "src_path": "/Users/priyanshbhardwaj/Documents/rust-migration/basic_rust/src/main.rs",
    "edition": "2021",
    "doc": true,
    "doctest": false,
    "test": true
  },
  "message": {
    "rendered": "For more information about an error, try `rustc --explain E0061`.\n",
    "$message_type": "diagnostic",
    "children": [],
    "code": null,
    "level": "failure-note",
    "message": "For more information about an error, try `rustc --explain E0061`.",
    "spans": []
  }
}
{
  "reason": "build-finished",
  "success": false
}
